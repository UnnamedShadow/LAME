/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_LAME__
#define __RUST_LAME__
#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_uint8 {
    /** <No documentation available> */
    uint8_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_uint8_t;

/** <No documentation available> */
void
compile (
    Vec_uint8_t const * link);

/** <No documentation available> */
typedef struct Macro {
    /** <No documentation available> */
    Vec_uint8_t name;

    /** <No documentation available> */
    Vec_uint8_t file;

    /** <No documentation available> */
    Vec_uint8_t data;
} Macro_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_Macro {
    /** <No documentation available> */
    Macro_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_Macro_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_Vec_uint8 {
    /** <No documentation available> */
    Vec_uint8_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_Vec_uint8_t;

/** <No documentation available> */
Vec_Vec_uint8_t
expand (
    Vec_Macro_t const * data);

/** <No documentation available> */
Vec_Vec_uint8_t
generate (
    Vec_Vec_uint8_t const * data);

/** <No documentation available> */
Macro_t
parse (
    Vec_uint8_t const * data);


#include <stdbool.h>

/** <No documentation available> */
typedef struct Data {
    /** <No documentation available> */
    bool parenthesized;

    /** <No documentation available> */
    Vec_uint8_t raw;
} Data_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_Data {
    /** <No documentation available> */
    Data_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_Data_t;

/** <No documentation available> */
Vec_Data_t
split_parenthesis (
    Vec_uint8_t const * data);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_LAME__ */
